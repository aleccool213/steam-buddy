// Generated by CoffeeScript 1.9.3
(function() {
  var $q, PLAYER_SUMMARY_URL, Parser, SlackIntegration, User, async, config, getOnlineUsers, http, init, integrations, isUserOnline, parseUsers, parser, request, sendMessage, sendNotifications;

  request = require('request');

  http = require('http');

  Parser = require('./parser.js');

  config = require('../../config.json');

  parser = new Parser();

  SlackIntegration = require('./integrations/slack_integration.js');

  User = require('./user.js');

  $q = require('Q');

  async = require('async');

  PLAYER_SUMMARY_URL = process.env.PLAYER_SUMMARY_URL;

  integrations = [];

  init = function() {
    var id, minutes, the_interval, user, usersToCheck;
    integrations.push(new SlackIntegration({
      token: process.env.SLACK_TOKEN
    }));
    console.log('config users:', config.users);
    usersToCheck = [];
    usersToCheck = (function() {
      var ref, results;
      ref = config.users;
      results = [];
      for (id in ref) {
        user = ref[id];
        results.push(new User({
          name: user,
          id: id
        }));
      }
      return results;
    })();
    console.log('users to check: ', usersToCheck);
    minutes = .1;
    the_interval = minutes * 60 * 1000;
    return setInterval(((function(_this) {
      return function() {
        console.log('users', usersToCheck);
        return getOnlineUsers(usersToCheck);
      };
    })(this)), the_interval);
  };

  sendNotifications = function(user) {
    var i, integration, len, results;
    console.log('sending muh notification for', user);
    results = [];
    for (i = 0, len = integrations.length; i < len; i++) {
      integration = integrations[i];
      results.push(integration.sendNotification(user.name, user.currentGame));
    }
    return results;
  };

  parseUsers = function(usersToCheck) {
    var id, ref, user;
    ref = config.users;
    for (id in ref) {
      user = ref[id];
      usersToCheck.push(new User({
        name: user,
        id: id
      }));
    }
    console.log('populated users:', usersToCheck);
    return usersToCheck;
  };

  getOnlineUsers = function(allUsers) {
    var deferred, onlineUsers;
    console.log('all users:', allUsers);
    onlineUsers = [];
    deferred = $q.defer();
    async.each(allUsers, function(user, callback) {
      return isUserOnline(user).then(function(result) {
        console.log('got a result:', result);
        if (result) {
          onlineUsers.push(result);
        }
        return callback();
      });
    }, function(err) {
      var i, len, user;
      if (!err) {
        for (i = 0, len = onlineUsers.length; i < len; i++) {
          user = onlineUsers[i];
          sendNotifications(user);
        }
      }
      if (!err) {
        return deferred.resolve(onlineUsers);
      }
    });
    return deferred.promise;
  };

  isUserOnline = function(user) {
    var deferred, url;
    console.log('Checking user ', user, typeof user);
    url = PLAYER_SUMMARY_URL + user.id;
    deferred = $q.defer();
    request(url, function(error, response, body) {
      var game, parsedResult, player;
      if (!error && response.statusCode === 200) {
        parsedResult = JSON.parse(body);
        player = parsedResult.response.players[0];
        console.log('parsed player:', player);
        if (!player) {
          return null;
        }
        game = player.gameextrainfo;
        console.log('game:', game);
        if (game && !user.isPlaying()) {
          user.setInGame(game);
          return deferred.resolve(user);
        } else if (!game) {
          user.setInactive();
          return deferred.resolve(null);
        }
      } else {
        console.log('An error was encountered', error);
        return error;
      }
    });
    return deferred.promise;
  };

  sendMessage = function(steamIdToCheck) {
    var url;
    url = TEST_URL + steamIdToCheck;
    console.log('id to check:', steamIdToCheck);
    return request(url, function(error, response, body) {
      var game, messageText, parsedResult, player, playerId, playerName;
      if (!error && response.statusCode === 200) {
        parsedResult = JSON.parse(body);
        player = parsedResult.response.players[0];
        if (!player) {
          return;
        }
        playerId = player.steamid;
        playerName = player.personaname;
        game = player.gameextrainfo;
        if (game) {
          console.log('%s is playing %s', playerName, game);
          if (!userIsInGame(playerId)) {
            messageText = playerName + ' is playing ' + game + '! Go join him!';
            notify(messageText);
            return currOnline.push(playerId);
          }
        } else {
          if (userIsInGame(playerId)) {
            return currOnline.splice(currOnline.indexOf(playerId), 1);
          }
        }
      }
    });
  };

  init();

}).call(this);
